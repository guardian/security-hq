AWSTemplateFormatVersion: 2010-09-09
Description: Centralised security reporting for AWS

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: S3 Configuration
      Parameters:
      - SecurityHQSourceBundleBucket
    - Label:
        default: Security
      Parameters:
      - AccessRestrictionCidr
      - SSHAccessCidr
      - KeyName
    - Label:
        default: Networking
      Parameters:
      - VpcId
      - Subnets
      - TLSCertArn

Parameters:
  SecurityHQSourceBundleBucket:
    Type: String
    Description: S3 bucket containing Security HQ's source bundle
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: ID of the VPC Security HQ will run in
  Subnets:
    Description: The subnets in which Security HQ will run
    Type: List<AWS::EC2::Subnet::Id>
  AMI:
    Description: Base AMI for Security HQ instances
    Type: AWS::EC2::Image::Id
  TLSCertArn:
    Description: ARN of a TLS certificate to install on the load balancer
    Type: String
  AccessRestrictionCidr:
    Description: CIDR block from which access to Security HQ should be allowed
    Type: String
  SSHAccessCidr:
    Description: A CIDR from which SSH access to the OWASP SKF instance is allowed
    Type: String
    AllowedPattern: ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$
    ConstraintDescription: Parameter should be a CIDR block e.g. "1.2.3.4/32"
  KeyName:
    Description: An ssh keypair to put on the instance
    Type: AWS::EC2::KeyPair::KeyName
  Stage:
    Description: Application stage (e.g. PROD, CODE)
    Type: String
    AllowedValues:
    - PROD
    - CODE
    - DEV

Mappings:
  Constants:
    Stack:
      Value: security
    App:
      Value: security-hq

Resources:
  SecurityHQInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref SecurityHQInstanceRole

  SecurityHQInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns: [ "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM" ]
      Policies:
      - PolicyName: security-hq-instance-policy
        PolicyDocument:
          Statement:
          # needs to be able to fetch artifacts and config from S3
          - Effect: Allow
            Resource:
            - !Sub arn:aws:s3:::${SecurityHQSourceBundleBucket}
            - !Sub arn:aws:s3:::${SecurityHQSourceBundleBucket}/*
            Action:
            - s3:ListBucketVersions
            - s3:ListBucket
            - s3:GetObjectVersion
            - s3:GetObject
          # Describe instance tags, to find out its own stack, app, stage.
          - Effect: Allow
            Resource: "*"
            Action:
            - ec2:DescribeTags
          # allow security HQ to assume roles in watched accounts
          - Effect: Allow
            Resource: "*"
            Action:
            - sts:AssumeRole

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: HTTP access to the load balancer from within the Guardian (for now)
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp:
          Ref: AccessRestrictionCidr
      Tags:
      - Key: Stack
        Value: !FindInMap [ Constants, Stack, Value ]
      - Key: App
        Value: !FindInMap [ Constants, App, Value ]
      - Key: Stage
        Value: !Ref Stage

  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Listeners:
      - LoadBalancerPort: 443
        InstancePort: 9000
        Protocol: HTTPS
        SSLCertificateId:
          Ref: TLSCertArn
      CrossZone: true
      HealthCheck:
        Target: HTTP:9000/healthcheck
        HealthyThreshold: 2
        UnhealthyThreshold: 10
        Interval: 30
        Timeout: 10
      Subnets:
        Ref: Subnets
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup
      AccessLoggingPolicy:
        EmitInterval: 5
        Enabled: true
        S3BucketName: gu-elb-logs
        S3BucketPrefix:
          Fn::Join:
          - "/"
          - - ELBLogs
            - Fn::FindInMap: [ Constants, Stack, Value ]
            - Fn::FindInMap: [ Constants, App, Value ]
            - Ref: Stage
      Tags:
      - Key: Stack
        Value:
          Fn::FindInMap: [ Constants, Stack, Value ]
      - Key: App
        Value:
          Fn::FindInMap: [ Constants, App, Value ]
      - Key: Stage
        Value:
          Ref: Stage

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security-hq instance
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        # allow ELB to talk to instance
      - IpProtocol: tcp
        FromPort: 9000
        ToPort: 9000
        SourceSecurityGroupId:
          Ref: LoadBalancerSecurityGroup
        # allow SSH access from within the office
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp:
          Ref: SSHAccessCidr
      SecurityGroupEgress:
        # allow instance to make http requests
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Stage
        Value:
          Ref: Stage
      - Key: Stack
        Value:
          Fn::FindInMap: [ Constants, Stack, Value ]
      - Key: App
        Value:
          Fn::FindInMap: [ Constants, App, Value ]

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName:
        Ref: KeyName
      ImageId:
        Ref: AMI
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      InstanceType: t2.micro
      IamInstanceProfile:
        Ref: SecurityHQInstanceProfile
      AssociatePublicIpAddress: true
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ev
          locale-gen en_GB.UTF-8
          add-apt-repository -y ppa:openjdk-r/ppa
          apt-get -y update
          apt-get -y upgrade
          apt-get -y install openjdk-8-jre-headless ntp python-pip
          pip install --upgrade pip
          pip install awscli
          wget https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb
          mkdir /tmp/ssm
          dpkg -i amazon-ssm-agent.deb
          echo ${Stage} > /etc/stage
          # fix java-8 certs
          /var/lib/dpkg/info/ca-certificates-java.postinst configure
          # setup security-hq
          adduser --system --home /security-hq --disabled-password security-hq
          aws --region eu-west-1 s3 cp s3://${SecurityHQSourceBundleBucket}/security/${Stage}/security-hq/security-hq.conf /security-hq
          aws --region eu-west-1 s3 cp s3://${SecurityHQSourceBundleBucket}/security/${Stage}/security-hq/security-hq-service-account-cert.json /security-hq
          aws --region eu-west-1 s3 cp s3://${SecurityHQSourceBundleBucket}/security/${Stage}/security-hq/security-hq.tgz /security-hq
          # Expand zipped tar file; remove base directory 
          tar -xzf /security-hq/security-hq.tgz --strip 1 --directory /security-hq/
          # Put upstart file in correct location with correct ownership
          mv /security-hq/upstart/security-hq.conf /etc/init
          chown root /etc/init/security-hq.conf
          chmod 700 /etc/init/security-hq.conf
          # Give ownership of all the application files to the application user
          chown -R security-hq /security-hq
          # Start application
          start security-hq

  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ""
      VPCZoneIdentifier:
        Ref: Subnets
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      HealthCheckType: ELB
      HealthCheckGracePeriod: 120
      LoadBalancerNames:
      - Ref: LoadBalancer
      Tags:
      - Key: Stage
        Value:
          Ref: Stage
        PropagateAtLaunch: true
      - Key: Stack
        Value:
          Fn::FindInMap: [ Constants, Stack, Value ]
        PropagateAtLaunch: true
      - Key: App
        Value:
          Fn::FindInMap: [ Constants, App, Value ]
        PropagateAtLaunch: true
      - Key: Name
        Value:
          Fn::FindInMap: [ Constants, App, Value ]
        PropagateAtLaunch: true

Outputs:
  LoadBalancerUrl:
    Value:
      'Fn::GetAtt':
      - LoadBalancer
      - DNSName

