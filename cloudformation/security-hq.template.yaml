AWSTemplateFormatVersion: 2010-09-09
Description: Centralised security reporting for AWS

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: S3 Configuration
      Parameters:
      - SecurityHQSourceBundleBucket
    - Label:
        default: Security
      Parameters:
      - AccessRestrictionCidr
    - Label:
        default: Networking
      Parameters:
      - VpcId
      - Subnets
      - TLSCertArn

Parameters:
  SecurityHQSourceBundleBucket:
    Type: String
    Description: S3 bucket containing Security HQ's source bundle
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: ID of the VPC Security HQ will run in
  Subnets:
    Description: The subnets in which Security HQ will run
    Type: List<AWS::EC2::Subnet::Id>
  AMI:
    Description: Base AMI for Security HQ instances
    Type: AWS::EC2::Image::Id
  TLSCertArn:
    Description: ARN of a TLS certificate to install on the load balancer
    Type: String
  AccessRestrictionCidr:
    Description: CIDR block from which access to Security HQ should be allowed
    Type: String
  Stage:
    Description: Application stage (e.g. PROD, CODE)
    Type: String
    AllowedValues:
    - PROD
    - CODE
    - DEV
  LoggingRoleToAssumeArn:
    Type: String
    Description: Name of IAM role in logging account e.g. arn:aws:iam::222222222222:role/LoggingRole
  InstanceType:
    Type: String
    Description: AWS instance type (e.g. t4g.large)
  TopicARN:
    Type: String
    Description: ARN for Anghammarad's SNS topic

Mappings:
  Constants:
    Stack:
      Value: security
    App:
      Value: security-hq

Resources:
  LoggingPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LoggingPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Resource: !Ref "LoggingRoleToAssumeArn"
      Roles:
        - !Ref SecurityHQInstanceRole

  SnsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SnsPublish
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource: !Ref TopicARN
      Roles:
        - !Ref SecurityHQInstanceRole

  SecurityHQInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref SecurityHQInstanceRole

  SecurityHQInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /

  SecurityHQInstallBucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: security-hq-install-bucket-policy
      PolicyDocument:
        Statement:
        # needs to be able to fetch artifacts and config from S3
        - Effect: Allow
          Resource:
          - !Sub arn:aws:s3:::${SecurityHQSourceBundleBucket}
          - !Sub arn:aws:s3:::${SecurityHQSourceBundleBucket}/*
          Action:
          - s3:ListBucketVersions
          - s3:ListBucket
          - s3:GetObjectVersion
          - s3:GetObject
        # Get parameters from SSM
        - Effect: Allow
          Resource: "*"
          Action:
          - ssm:GetParametersByPath
        # Get the list of regions
        - Effect: Allow
          Resource: "*"
          Action:
          - ec2:DescribeRegions
      Roles:
      - !Ref SecurityHQInstanceRole

  SecurityHQDescribeTagsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: security-hq-describe-tags-policy
      PolicyDocument:
        Statement:
        # Describe instance tags, to find out its own stack, app, stage.
        - Effect: Allow
          Resource: "*"
          Action:
          - autoscaling:DescribeAutoScalingInstances
          - autoscaling:DescribeAutoScalingGroups
          - ec2:DescribeRegions
          - ec2:DescribeTags
      Roles:
      - !Ref SecurityHQInstanceRole

  SecurityHQSSMRunCommandPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: security-hq-ssm-run-command-policy
      PolicyDocument:
        Statement:
        # minimal policy to allow security HQ to (only) run commands via ssm
        - Effect: Allow
          Resource: "*"
          Action:
          - ec2messages:AcknowledgeMessage
          - ec2messages:DeleteMessage
          - ec2messages:FailMessage
          - ec2messages:GetEndpoint
          - ec2messages:GetMessages
          - ec2messages:SendReply
          - ssm:UpdateInstanceInformation
          - ssm:ListInstanceAssociations
          - ssm:DescribeInstanceProperties
          - ssm:DescribeDocumentParameters
          - ssmmessages:CreateControlChannel
          - ssmmessages:CreateDataChannel
          - ssmmessages:OpenControlChannel
          - ssmmessages:OpenDataChannel
      Roles:
      - !Ref SecurityHQInstanceRole

  SecurityHQAssumeRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: security-hq-assume-role-policy
      PolicyDocument:
        Statement:
        # allow security HQ to assume roles in watched accounts
        - Effect: Allow
          Resource: "*"
          Action:
          - sts:AssumeRole
      Roles:
      - !Ref SecurityHQInstanceRole
      
  CloudWatchMetrics:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: cloudwatch-put-metric
      PolicyDocument:
        Statement:
        - Effect: Allow
          Resource: "*"
          Action:
          - cloudwatch:PutMetricData
      Roles:
      - !Ref SecurityHQInstanceRole

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: HTTP access to the load balancer from within the Guardian (for now)
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp:
          Ref: AccessRestrictionCidr
      Tags:
      - Key: Stack
        Value: !FindInMap [ Constants, Stack, Value ]
      - Key: App
        Value: !FindInMap [ Constants, App, Value ]
      - Key: Stage
        Value: !Ref Stage

  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Listeners:
      - LoadBalancerPort: 443
        InstancePort: 9000
        Protocol: HTTPS
        SSLCertificateId:
          Ref: TLSCertArn
      CrossZone: true
      HealthCheck:
        Target: HTTP:9000/healthcheck
        HealthyThreshold: 2
        UnhealthyThreshold: 10
        Interval: 30
        Timeout: 10
      Subnets:
        Ref: Subnets
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup
      AccessLoggingPolicy:
        EmitInterval: 5
        Enabled: true
        S3BucketName: gu-elb-logs
        S3BucketPrefix:
          Fn::Join:
          - "/"
          - - ELBLogs
            - Fn::FindInMap: [ Constants, Stack, Value ]
            - Fn::FindInMap: [ Constants, App, Value ]
            - Ref: Stage
      Tags:
      - Key: Stack
        Value:
          Fn::FindInMap: [ Constants, Stack, Value ]
      - Key: App
        Value:
          Fn::FindInMap: [ Constants, App, Value ]
      - Key: Stage
        Value:
          Ref: Stage

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security-hq instance
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        # allow ELB to talk to instance
      - IpProtocol: tcp
        FromPort: 9000
        ToPort: 9000
        SourceSecurityGroupId:
          Ref: LoadBalancerSecurityGroup
      SecurityGroupEgress:
        # allow instance to make http requests
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        Description: Wazuh agent communication
        FromPort: 1514
        ToPort: 1515
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Stage
        Value:
          Ref: Stage
      - Key: Stack
        Value:
          Fn::FindInMap: [ Constants, Stack, Value ]
      - Key: App
        Value:
          Fn::FindInMap: [ Constants, App, Value ]

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: AMI
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      InstanceType: !Ref InstanceType
      IamInstanceProfile:
        Ref: SecurityHQInstanceProfile
      AssociatePublicIpAddress: true
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ev
          # setup security-hq
          mkdir -p /etc/gu

          aws --region eu-west-1 s3 cp s3://${SecurityHQSourceBundleBucket}/security/${Stage}/security-hq/security-hq.conf /etc/gu
          aws --region eu-west-1 s3 cp s3://${SecurityHQSourceBundleBucket}/security/${Stage}/security-hq/security-hq-service-account-cert.json /etc/gu
          aws --region eu-west-1 s3 cp s3://${SecurityHQSourceBundleBucket}/security/${Stage}/security-hq/security-hq.deb /tmp/installer.deb

          dpkg -i /tmp/installer.deb

  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ""
      VPCZoneIdentifier:
        Ref: Subnets
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      HealthCheckType: ELB
      HealthCheckGracePeriod: 120
      LoadBalancerNames:
      - Ref: LoadBalancer
      Tags:
      - Key: Stage
        Value:
          Ref: Stage
        PropagateAtLaunch: true
      - Key: Stack
        Value:
          Fn::FindInMap: [ Constants, Stack, Value ]
        PropagateAtLaunch: true
      - Key: App
        Value:
          Fn::FindInMap: [ Constants, App, Value ]
        PropagateAtLaunch: true
      - Key: Name
        Value:
          Fn::FindInMap: [ Constants, App, Value ]
        PropagateAtLaunch: true

Outputs:
  LoadBalancerUrl:
    Value:
      'Fn::GetAtt':
      - LoadBalancer
      - DNSName

